// Code generated by go-bindata.
// sources:
// schema.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x5b\x5f\xaf\xdb\xb6\x15\x7f\xbf\x9f\x82\x70\x07\x14\x28\x64\xdf\x66\x2b\xf2\xd0\x3e\x05\xe9\x36\x0c\x58\xbb\x01\x6d\x9f\x8a\x3c\x50\x12\x6d\x31\x57\x22\x55\x92\xb2\xe3\x05\xf9\x50\xfb\x22\xfb\x4c\x3b\x87\x14\x69\xd9\x96\x64\x2a\x96\xdd\x9b\x22\x7a\x48\x7c\xa5\xc3\xc3\xdf\x39\x3c\x3c\xff\x44\xbd\x7f\x20\x70\x2d\xfe\xa4\xb3\x82\x55\x74\xf1\x2d\x59\x14\xc6\xd4\xdf\x3e\x3e\xbe\xd5\x52\x2c\xdd\xdd\x95\x54\x9b\xc7\x5c\xd1\xb5\x59\x7e\xfd\xcd\xa3\xbb\xf7\xc5\x22\x71\x23\x73\xa6\x33\xc5\x6b\xc3\xa5\xc0\xd1\xaf\x65\x55\x97\xcc\x30\xe2\xc8\xc8\x5a\x2a\x52\xf3\x9a\x6d\xf9\x7f\x48\xc5\xb4\xa6\x1b\xa6\x57\x7e\xac\xd9\xd7\x0c\x07\xc9\xf4\x2d\xcb\x8c\xbf\x5b\x2b\x59\x33\x65\x38\xd3\xf0\xcc\xe1\xb3\xf7\xb3\x92\x33\x61\x8e\xee\x39\xec\x8a\xad\x91\xcb\x17\x8f\x39\x5b\x73\xc1\x11\x8a\x7e\x6c\xa9\x03\xe9\x87\xe4\xc0\x89\x89\x2d\x57\x52\x54\x40\xa0\xcf\xf9\x79\x54\x54\x29\xba\x5f\x24\xc7\x0f\x2b\x2e\xfe\x61\x58\x85\xc3\x5e\x9c\x3c\xe2\xed\xfd\xf7\x43\x90\x3a\xd3\x2e\xc8\x87\x5e\x64\xa5\xdc\xf0\x6c\xa9\x0d\x35\xec\x9e\xc8\x3a\xd3\x0e\x21\xcb\xa9\xa1\x9a\xdd\x55\x5f\xed\x94\x43\x88\xc0\x4e\x32\xb0\xa8\xbb\x2a\xaa\x9d\x73\x08\x52\x26\xab\x8a\xdf\x55\x47\x6e\xc6\x71\x3c\xcb\x8a\x19\x7a\x77\x4c\x6e\xd6\x01\x60\xfb\xa6\x5a\xd6\x4f\x9b\xdb\x82\xea\x62\xf2\x13\x76\xf1\x3c\x74\x50\x2d\x68\x9e\x5b\x52\x5a\xfe\xbb\xeb\x7f\xd6\xb4\xd4\xac\x25\x51\xec\xb7\x86\x2b\x96\xc3\xed\x5f\xbd\x37\x7a\x13\xdc\x60\x98\x2b\xce\x6b\x19\x6e\x4a\x2b\xe9\x6b\x4b\x40\xb8\x00\x57\x59\x51\xeb\x47\x4f\x64\x3b\x71\xb1\xaf\x88\xae\x69\xc6\xac\x6b\x65\x34\x2b\xbc\x5f\x5d\x82\x71\xe6\x4d\xc6\xc5\x86\xb8\x49\x89\x91\x64\xc3\xb7\x8c\x80\x49\x12\x41\x2b\x96\x90\x2d\x53\x1a\xd8\x24\x84\x8a\x9c\x94\x32\xa3\x25\x31\x1c\xc6\x1b\x5a\xd5\x44\xae\xc9\xae\x60\x82\x50\xcf\x91\xec\xa8\x26\x99\x62\xe0\x16\xf2\xd5\x29\xaa\x5e\xe7\x1d\x9e\x0e\x38\xf1\xf0\x1c\xe1\xf4\x3e\x39\xe2\xad\x8d\x02\x71\x4e\x78\x0f\xe9\xe5\xe7\x82\x59\x29\x51\x0e\x03\xbf\xbd\x10\x07\xb5\x18\x29\x41\xde\x82\x1a\x2f\x54\x97\x6e\x45\x7e\x56\x7b\x54\x59\xca\x48\x2a\x4d\x41\x1a\xc1\x7f\x6b\x98\xd5\x54\x06\xcb\xca\xb5\x01\x9d\xae\x16\x67\x58\x3e\x9c\xc3\x5b\xb4\x7a\x9e\x59\xc2\x57\x7e\xfd\x88\x68\xaa\x94\xa9\x71\x49\x23\xa1\x56\x3c\x53\x12\x8d\xe0\x32\x58\x2e\x0c\xdb\x30\x15\x89\xf6\x17\xc1\xdf\x59\xeb\x4a\xc0\xb8\x89\x9d\x46\x33\xd0\x64\xae\x93\x60\x6a\x88\xbe\x63\xf9\xc4\xb1\x48\x61\x65\xb8\x38\x12\x0d\x2d\x51\xa6\x9a\xa9\x2d\xcb\x13\x58\xa2\x0c\x17\xda\xa8\x06\x98\x33\x93\xad\xc8\x0f\x52\x9b\x90\x60\x10\xaa\x20\x01\xb1\xbb\xaa\xaa\x58\xce\x61\xa9\xcb\x3d\x8c\x6a\xe0\xc6\x9a\x08\x69\x12\xe0\xcd\xb5\x05\x47\x74\x21\x9b\x32\xc7\x55\xb7\x46\x81\x28\x1c\xe8\xaf\x80\xf0\x2b\x64\x93\xdb\x1b\x7d\xea\x7c\x18\x51\x6e\x84\x47\x09\xa4\x5d\xcf\xd2\xee\x8d\xa4\xbb\x32\xe4\xcd\xa5\x3c\x66\xc4\xc1\xfc\xb5\x43\x75\xc9\xb3\x28\x56\x2b\x86\x9a\x73\x8a\x80\x65\xa2\x82\x74\xa6\x21\x4b\x52\x17\x7b\xcd\xc1\x71\x80\x33\xe1\xca\x34\xf8\x03\x1c\x11\xac\xab\xa1\x5c\x30\x35\xb3\x9f\x68\x47\x0f\x18\x26\x83\x7d\xe0\x74\xe6\x51\xa1\xde\x5a\x5c\xf8\x33\xc0\x02\x15\x0e\x5a\xed\x9a\x36\x25\x2a\x30\x0c\x8c\xda\x37\xb2\x1f\xf1\x09\xae\x1d\x17\xb9\xdc\x69\xc4\x52\x72\xd1\xbc\xc3\x1f\x39\x55\x70\x1b\x7f\xad\x15\x63\xa9\xce\xf1\x27\x78\x9b\x77\x51\x20\x2d\x61\x14\x42\x30\x40\x85\xc9\xca\x20\xcc\xfe\xf0\xed\x87\x45\xcd\x21\x78\xf6\x34\xbb\x97\x43\xa6\xd6\x93\xf3\x1c\x6c\x8e\xaf\xf7\xd6\xa5\xe1\x8e\xed\x98\xe2\x8a\xfc\xd8\x92\x41\x8c\x02\x2b\x85\x0d\xdc\x68\x70\x1c\xe0\x28\x40\x2c\xa6\x30\xb9\xb7\x31\xd2\xc9\x66\x39\x30\x52\x70\xa6\xa8\xca\x0a\xb4\x15\xa0\x2b\xad\x9d\xeb\x82\xd7\x30\xde\xec\x18\x46\xbf\x63\x83\x47\xf7\x8f\xf1\x13\x2d\x09\x59\x3a\x37\x02\xae\xc1\xf2\x06\x8f\x51\x12\x01\x23\xa5\x7a\xf2\x8a\xa3\x69\xc9\x8e\x58\x6b\x80\xca\x00\x19\x0e\xca\xa4\x02\x9a\x5a\xa2\x53\x91\xc0\x7c\xef\x58\xd8\xd4\xfb\x48\x22\xb9\x64\xef\x20\xe4\xa0\x1f\xa4\x64\x53\xca\x14\x27\xc2\x47\x21\xf6\xd3\xb2\xec\x22\xd5\xe4\x49\xc8\x9d\xf0\x6c\x7d\xd1\xc5\x05\xf0\x16\x19\xf8\x33\x2d\xe1\x66\xf6\x84\x6a\xa8\xc8\x8e\x6b\xf0\x89\x91\x21\x02\x36\xe9\x16\x96\x42\x45\x2f\x74\x14\xd7\xd1\x5a\xe7\x8c\x73\x5f\x42\x18\x88\x86\x13\xc3\x40\xf2\xb1\x35\xd0\x05\xbd\x0c\x54\x20\xf7\x87\xdf\x53\x99\x8c\x41\x1f\x2c\xe7\xee\x8f\xbc\xa7\xcc\x0b\xc8\xe7\x0a\xb0\xb0\x23\xfe\x85\x53\xff\x7a\x36\xc5\xfb\xb3\xe8\x8b\x1e\x8d\xbc\xe9\xd3\xda\x19\xad\x77\x95\x48\x7e\x44\xdd\x1f\xaf\x87\x1c\xf2\x95\x31\xb2\x80\xdc\x67\x8e\x7c\xda\xa5\x61\xb6\x07\x04\x1c\x97\x96\x65\x94\x31\xf1\x7a\xfb\xcd\x7c\x93\x5b\x6e\xb1\xf3\xbe\x9c\x75\xde\x97\x93\x73\xbc\x78\xbb\x0a\xab\x14\x69\x5b\x56\x0d\xf1\xb4\x2f\x7b\x8c\x70\xc2\x7e\x19\xca\x2f\x97\x90\xb5\x9c\x07\xf8\x0b\x06\x7b\x12\xd0\xbf\x6f\x93\x7a\xc8\xcb\x09\xb2\x23\x29\x85\x30\xb4\x56\xb2\x82\x1b\x10\xd6\x6d\xbd\x62\xa3\x73\x37\xf0\xba\x3a\xcd\xe5\x6f\x1a\x42\xf0\x8a\x7c\xf9\xba\xfd\xeb\x4b\x1b\x15\x75\x48\x45\x81\x0d\xe4\xac\x9a\xd9\x7b\x52\x6b\x0e\x11\x18\xca\x39\x4c\x18\x68\x0d\xbb\x07\x8b\x64\x01\x11\xd8\x02\x80\x20\x6c\xcb\x26\xd9\x6c\x0a\x73\x96\xad\x5e\xda\x6b\x9d\x2d\x7c\x29\x7f\xba\x60\x3a\x43\x9e\xe4\xda\x45\xeb\xc6\xb1\x99\x1d\x4d\x6c\x32\x9e\x72\x41\xd5\xde\xe5\xdf\x39\x73\xb9\x6f\xaa\xf0\x56\xc7\x31\x0e\xe8\xc5\x01\xa1\xa6\x70\x2a\x3e\xd9\xc4\xa3\x39\x68\x1c\x75\xb9\x51\xb2\xa9\xe3\xe9\x4f\x8a\xac\x91\xe6\xae\xdb\x2b\xfd\x93\x5a\xf9\x87\x14\xdb\x55\xee\x9c\xf1\xf6\x4c\xbc\x38\xaf\x9a\x5f\x06\xd9\x6b\x3f\x81\x4a\x0a\x36\xe0\x15\xfd\xd5\xcf\x3e\x30\xb8\x60\x88\x67\xf4\x6d\x17\xf4\x20\x34\x19\x95\xba\x7b\xf5\x68\xe0\x88\xf5\xf1\x36\xf5\xed\xd6\x81\x3a\x2d\x8c\x8a\xda\xb5\x13\xa0\xcc\xac\xaf\x4e\x7b\x2a\xc6\x4a\x22\x41\x5a\xd6\xc7\xfa\xf2\x13\x7d\xea\x0a\xd3\xac\xda\xba\xfa\xe7\xb6\xfa\x6a\xe7\xb9\x91\xba\x7a\x9f\xc4\x79\xe4\x67\x54\x2f\x40\x4e\x20\x96\x88\x67\x7a\xc5\x70\xac\x6c\x1b\x65\xae\x0f\xb8\x07\x3c\x13\xc3\xed\xb0\x9b\x1c\x50\x71\xa4\xd5\x86\xe6\x7a\x54\x80\x3b\x05\xfb\xbe\x1b\xc9\xdb\xee\x69\x3e\x90\x88\x86\xb1\xba\x49\xb1\x84\x9b\x3c\x27\x76\x94\x15\xcd\xcc\x58\xaf\x3c\x10\x1f\x60\xa9\x1d\x26\x15\x4a\xf6\xe5\x13\xfe\x1a\x9b\x16\x97\xec\x47\x36\x1a\xcf\xed\xaa\x8a\xfe\xb2\x74\x84\xfd\x69\x62\xde\x91\x2f\x69\x55\x93\x1c\xe6\x1f\xec\xf7\x4d\xda\xdf\x7d\x15\xc2\x67\x03\xea\x21\x9e\xd7\x80\xf0\xfd\xc6\x45\x0b\x72\x6d\xdd\x1b\x99\xd0\x2f\xa3\x3d\xe3\x3f\x8c\x0d\xad\x79\x39\x54\x35\x87\x71\x9f\xed\xe7\xc0\xfc\x77\xb1\x9f\x88\xf6\x57\x70\xa9\x73\xb4\x13\x6a\x23\x55\xfb\x7e\x4a\x36\x66\x23\xb1\x8b\xd0\x36\xe2\xb1\x6b\x20\x98\x95\xf8\x3b\xec\x30\x50\xb5\x61\x26\x94\xe5\xf7\x0a\xc2\x17\xbb\x72\x67\xd2\x8f\x36\xaa\x02\x75\x54\x97\xce\x5f\x63\x36\x58\x4b\x75\xb2\x61\xfc\xfb\xdd\xf1\x61\x4a\x1a\x39\x25\x13\x8e\x33\xd3\xa0\xae\xa4\x45\x96\xf8\xa9\x9e\xab\x83\x1b\xed\x7a\x06\xaa\x8f\x5d\xdc\xfe\x2e\xe8\x88\x34\x07\xfc\xcf\x6a\x5d\xad\x1c\x9f\xd2\x9a\x0e\x77\x94\x03\xd5\x15\x6b\xda\xd3\x61\x1e\x91\xe6\x80\xff\xb9\xad\xe9\xcb\x9b\xad\x69\x6c\x20\x69\xda\xf0\x79\x93\x48\xe2\x8e\x46\xe1\x14\xfd\xc1\xc4\x96\x8e\x13\xbb\xa7\x23\x4d\xcd\x87\x7e\x0d\xf4\x9c\x76\x9c\xbb\xa5\xfb\xbb\xbd\x84\xfd\xb8\xde\x64\xa3\x07\xbb\x30\xb7\x6a\xdd\x4e\x6c\x17\x67\xbb\x3c\x9e\xd8\xbf\xfa\x8c\x1e\x50\xf3\x3c\xde\x0d\x2c\x4a\x7b\x66\xed\x19\xb4\x6c\x30\xf7\x5a\xb6\x68\xae\x6c\xda\x1c\x19\x6c\xe2\x34\x72\x7d\x0f\xa7\x0b\x70\xae\x97\x5d\xf8\x42\xcb\xb1\x64\x8a\x68\x9e\xb3\xd6\xc9\xd8\x84\x7c\xd9\xee\xe7\x8e\x7b\x59\x91\xd7\x8d\xc2\x63\x2b\xe5\x9e\xbc\x6d\xb4\x21\xe8\x5e\xb5\x3d\x80\xa2\x65\xf6\xc4\xf0\xec\x49\x29\xe1\x0e\xb0\x29\xe5\x96\xd9\x57\x5a\x3d\x07\x33\x6f\x96\xd1\xf6\xd5\x66\x36\x04\x5c\xa8\xcd\xae\x0d\x5e\x71\xc1\x78\xcc\x88\x03\xf1\x65\x63\x0e\xa4\x93\x7c\x95\xbf\xae\x89\xaa\xbe\x32\xfb\x34\x32\xa5\x3e\x63\x68\xcf\xb0\x8d\xaf\x6a\x64\x14\x1c\x41\x6e\xf9\x0c\xe8\xae\xaf\xa5\x1b\xc6\xcc\x9e\x88\x74\xfc\xf7\x15\x2e\xe3\x15\x69\xf9\xd8\x77\xd6\xe2\xc9\x1f\xeb\x05\x37\x51\xd9\xe3\x61\x78\x78\xd5\xfd\x4f\x52\x25\x69\x5e\xee\x57\x64\x4b\x15\xa7\xc2\x90\x17\x04\xdf\x72\x13\xcd\xca\xf5\x52\xcb\x46\x65\x2c\xf7\xec\xbe\x0b\x44\x7f\x76\x44\xeb\x46\x58\x4f\x83\x19\xce\x19\xcd\x5f\x1c\x4d\x7b\xff\x70\xa0\xf3\x99\x77\xad\xdd\x49\xee\xa5\x3f\xc0\xdc\x4d\xb7\xf3\xf0\x60\x94\xc3\x06\x1c\xb4\xe6\xfa\xd4\x98\xff\xf7\xdf\xf3\x13\x15\xfe\x8a\x33\x4a\x5f\xce\xfa\x09\x9e\xeb\x56\x7e\x06\x8a\x8f\x73\xf1\xa3\x6f\x9d\xa7\x8a\x1d\xe8\x27\x1d\xe9\x18\x9f\xdb\xf2\x1b\x72\x0a\x17\xc5\x8b\x89\x60\x61\x50\x7c\x24\x0b\x43\x3e\x2a\xa2\xf9\x2b\x46\x72\x2d\x68\x7d\xd1\x20\x46\xd9\x4c\x7b\x5b\x1a\x5a\x7a\x07\xa5\x27\x5d\x14\xf7\x7c\x8d\xfa\xd9\x25\xcc\x53\x6f\x1d\xa0\x4e\x39\x03\x14\x46\xb9\xf7\x00\x13\x7c\xca\x0d\xd3\xc6\xc9\xc7\x5d\xfd\x75\xb5\x85\xdd\xb3\x15\xe3\x4f\xde\xcc\x52\x33\x41\x22\x63\x73\x18\x9b\x7e\x28\x59\x12\xc7\x9f\x38\x36\x2b\xf2\x37\xa9\x88\x90\xbb\xc4\x15\x48\x1b\x3c\x15\x08\x82\xa4\x34\x85\xd4\xc8\x9d\x89\xdf\xd1\x3d\x7e\x5f\x24\xe0\xc6\x4f\xaf\x7f\xd0\xee\x18\x61\x41\xa1\x5c\xa2\x46\x56\x3c\x6b\x39\x82\x4f\x27\xdf\xbf\xfa\xfb\xe4\xf3\x7f\xba\xa0\x2f\xe2\xcb\x75\xc5\x6a\xa9\xb9\x91\x6a\x3f\xa9\x27\x10\xbf\xf5\x16\xb4\x31\x85\x9c\xd0\x12\x81\xfd\x61\x17\x24\xbe\xe3\x40\x55\xef\x67\xd2\x67\x2b\x1d\xdb\x44\xf8\x7a\x96\xde\xd0\x84\x8e\x81\x5d\xb2\xa4\x55\x6c\x12\x54\x96\x1c\x94\x91\x1c\xc4\x4c\x8e\x16\x6d\x8e\xc3\x21\x11\x5f\xe0\x4e\xdc\x24\xc8\x0c\xbd\x08\xa1\xa9\x6c\x0c\xec\x99\x76\x93\x2c\xa1\x3a\xa0\x22\x2b\x80\x04\xb6\x82\xa1\x1b\xd8\x4f\x5a\xcb\xcc\xbe\x80\x27\x3b\x6e\x0a\xc2\xf1\xd3\x37\xa6\x0d\x56\x00\xae\x87\xe2\xbe\x9f\xbb\xed\x36\xc0\x19\x7f\xea\x3d\x90\x1a\x48\x3a\x1d\x05\xc0\xcc\xec\x27\x51\x35\x13\xb9\xed\xaf\x43\x2a\x41\x79\x69\x0f\x11\x44\x75\x09\x51\xf4\x4f\xa0\x99\xe9\x57\xeb\xb9\x41\x9d\xba\xb7\xae\xdf\x25\x17\x3f\x07\x8f\xac\xa3\x6b\x9a\x3d\xd1\x0d\x4b\xf0\x20\x78\x23\x72\xa6\xb4\x91\x32\x27\xe9\xde\xd6\xd3\x30\x8b\xa7\x20\x15\x15\xf0\x9f\x72\x9f\x8c\x71\x41\x54\x5d\x2d\x53\x8a\x7f\xfc\x13\x3f\xd3\x23\x39\x47\x05\xa5\x8d\x8d\xd9\x93\xb7\xc7\xa4\xf4\xe9\xc2\x69\xcc\xbe\xbe\x76\x2d\xb3\x22\xbe\xa3\x06\x6b\x56\x32\x90\x6d\x42\x54\x51\xa7\xfc\x07\x5e\x55\x8c\x1a\x87\x4f\x76\xbd\x7c\xc9\x01\x49\xe2\x85\x48\xda\xc9\x3e\xd2\x86\x1e\xdc\xbf\x1f\x1e\xfe\x1f\x00\x00\xff\xff\x8f\x9a\xe5\xb6\xc8\x44\x00\x00")

func schemaJsonBytes() ([]byte, error) {
	return bindataRead(
		_schemaJson,
		"schema.json",
	)
}

func schemaJson() (*asset, error) {
	bytes, err := schemaJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.json", size: 17608, mode: os.FileMode(420), modTime: time.Unix(1449082034, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.json": schemaJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"schema.json": &bintree{schemaJson, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

